/*
 * This file is generated by jOOQ.
 */
package com.rulerbug.zoo;


import com.rulerbug.zoo.tables.Allbooks;
import com.rulerbug.zoo.tables.Limit;
import com.rulerbug.zoo.tables.Pages;
import com.rulerbug.zoo.tables.Role;
import com.rulerbug.zoo.tables.User;
import com.rulerbug.zoo.tables._Warning;
import com.rulerbug.zoo.tables.records.AllbooksRecord;
import com.rulerbug.zoo.tables.records.LimitRecord;
import com.rulerbug.zoo.tables.records.PagesRecord;
import com.rulerbug.zoo.tables.records.RoleRecord;
import com.rulerbug.zoo.tables.records.UserRecord;
import com.rulerbug.zoo.tables.records._WarningRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>mypages</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AllbooksRecord, Long> IDENTITY_ALLBOOKS = Identities0.IDENTITY_ALLBOOKS;
    public static final Identity<LimitRecord, Long> IDENTITY_LIMIT = Identities0.IDENTITY_LIMIT;
    public static final Identity<PagesRecord, Long> IDENTITY_PAGES = Identities0.IDENTITY_PAGES;
    public static final Identity<RoleRecord, Long> IDENTITY_ROLE = Identities0.IDENTITY_ROLE;
    public static final Identity<UserRecord, Long> IDENTITY_USER = Identities0.IDENTITY_USER;
    public static final Identity<_WarningRecord, Integer> IDENTITY__WARNING = Identities0.IDENTITY__WARNING;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AllbooksRecord> KEY_ALLBOOKS_PRIMARY = UniqueKeys0.KEY_ALLBOOKS_PRIMARY;
    public static final UniqueKey<LimitRecord> KEY_LIMIT_PRIMARY = UniqueKeys0.KEY_LIMIT_PRIMARY;
    public static final UniqueKey<PagesRecord> KEY_PAGES_PRIMARY = UniqueKeys0.KEY_PAGES_PRIMARY;
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = UniqueKeys0.KEY_ROLE_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<_WarningRecord> KEY__WARNING_PRIMARY = UniqueKeys0.KEY__WARNING_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AllbooksRecord, Long> IDENTITY_ALLBOOKS = Internal.createIdentity(Allbooks.ALLBOOKS, Allbooks.ALLBOOKS.ID);
        public static Identity<LimitRecord, Long> IDENTITY_LIMIT = Internal.createIdentity(Limit.LIMIT, Limit.LIMIT.ID);
        public static Identity<PagesRecord, Long> IDENTITY_PAGES = Internal.createIdentity(Pages.PAGES, Pages.PAGES.ID);
        public static Identity<RoleRecord, Long> IDENTITY_ROLE = Internal.createIdentity(Role.ROLE, Role.ROLE.ID);
        public static Identity<UserRecord, Long> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
        public static Identity<_WarningRecord, Integer> IDENTITY__WARNING = Internal.createIdentity(_Warning._WARNING, _Warning._WARNING.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AllbooksRecord> KEY_ALLBOOKS_PRIMARY = Internal.createUniqueKey(Allbooks.ALLBOOKS, "KEY_allBooks_PRIMARY", Allbooks.ALLBOOKS.ID);
        public static final UniqueKey<LimitRecord> KEY_LIMIT_PRIMARY = Internal.createUniqueKey(Limit.LIMIT, "KEY_limit_PRIMARY", Limit.LIMIT.ID);
        public static final UniqueKey<PagesRecord> KEY_PAGES_PRIMARY = Internal.createUniqueKey(Pages.PAGES, "KEY_pages_PRIMARY", Pages.PAGES.ID);
        public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, "KEY_role_PRIMARY", Role.ROLE.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<_WarningRecord> KEY__WARNING_PRIMARY = Internal.createUniqueKey(_Warning._WARNING, "KEY__WARNING_PRIMARY", _Warning._WARNING.ID);
    }
}
