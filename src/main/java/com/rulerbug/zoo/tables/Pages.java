/*
 * This file is generated by jOOQ.
 */
package com.rulerbug.zoo.tables;


import com.rulerbug.zoo.Indexes;
import com.rulerbug.zoo.Keys;
import com.rulerbug.zoo.Mypages;
import com.rulerbug.zoo.tables.records.PagesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pages extends TableImpl<PagesRecord> {

    private static final long serialVersionUID = -638476253;

    /**
     * The reference instance of <code>mypages.pages</code>
     */
    public static final Pages PAGES = new Pages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PagesRecord> getRecordType() {
        return PagesRecord.class;
    }

    /**
     * The column <code>mypages.pages.id</code>. 文章ID
     */
    public final TableField<PagesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "文章ID");

    /**
     * The column <code>mypages.pages.bookId</code>. 书Id
     */
    public final TableField<PagesRecord, Long> BOOKID = createField(DSL.name("bookId"), org.jooq.impl.SQLDataType.BIGINT, this, "书Id");

    /**
     * The column <code>mypages.pages.index</code>. 章节索引
     */
    public final TableField<PagesRecord, Long> INDEX = createField(DSL.name("index"), org.jooq.impl.SQLDataType.BIGINT, this, "章节索引");

    /**
     * The column <code>mypages.pages.title</code>. 文章标题
     */
    public final TableField<PagesRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "文章标题");

    /**
     * The column <code>mypages.pages.smallTitle</code>. 文章小标题
     */
    public final TableField<PagesRecord, String> SMALLTITLE = createField(DSL.name("smallTitle"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "文章小标题");

    /**
     * The column <code>mypages.pages.context</code>. 文章内容
     */
    public final TableField<PagesRecord, String> CONTEXT = createField(DSL.name("context"), org.jooq.impl.SQLDataType.CLOB, this, "文章内容");

    /**
     * The column <code>mypages.pages.firstCreatTime</code>. 创作时间
     */
    public final TableField<PagesRecord, LocalDateTime> FIRSTCREATTIME = createField(DSL.name("firstCreatTime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "创作时间");

    /**
     * The column <code>mypages.pages.changeTime</code>. 修改时间
     */
    public final TableField<PagesRecord, LocalDateTime> CHANGETIME = createField(DSL.name("changeTime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "修改时间");

    /**
     * Create a <code>mypages.pages</code> table reference
     */
    public Pages() {
        this(DSL.name("pages"), null);
    }

    /**
     * Create an aliased <code>mypages.pages</code> table reference
     */
    public Pages(String alias) {
        this(DSL.name(alias), PAGES);
    }

    /**
     * Create an aliased <code>mypages.pages</code> table reference
     */
    public Pages(Name alias) {
        this(alias, PAGES);
    }

    private Pages(Name alias, Table<PagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pages(Name alias, Table<PagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pages(Table<O> child, ForeignKey<O, PagesRecord> key) {
        super(child, key, PAGES);
    }

    @Override
    public Schema getSchema() {
        return Mypages.MYPAGES;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAGES_PRIMARY);
    }

    @Override
    public Identity<PagesRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAGES;
    }

    @Override
    public UniqueKey<PagesRecord> getPrimaryKey() {
        return Keys.KEY_PAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<PagesRecord>> getKeys() {
        return Arrays.<UniqueKey<PagesRecord>>asList(Keys.KEY_PAGES_PRIMARY);
    }

    @Override
    public Pages as(String alias) {
        return new Pages(DSL.name(alias), this);
    }

    @Override
    public Pages as(Name alias) {
        return new Pages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pages rename(String name) {
        return new Pages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pages rename(Name name) {
        return new Pages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
